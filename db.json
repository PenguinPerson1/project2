{
  "Notes": [
    {
      "id": "6b52",
      "category": "JavaScript",
      "topic": "mouse",
      "title": "Using Selection",
      "text": "the 'document.getSelection()' method can be used to acquire whatever text the user is selecting. If you just want the text, use '.toString()' to just turn it into a string. If instead, you want that text as an element, use '.getRangeAt()' to get a range from the selection\n",
      "links": [
        [
          "Get Selection Method",
          "https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection"
        ],
        [
          "Selection Reference",
          "https://developer.mozilla.org/en-US/docs/Web/API/Selection"
        ]
      ]
    },
    {
      "id": "bbb5",
      "category": "JavaScript",
      "topic": "mouse",
      "title": "Ranges",
      "text": "Ranges represent part of a document. I don't know how to use them effectively, but the '.insertNode()' was helpful for this because it allows you to add a node to the start of the range. This can be combined with '.deleteContents()' to replace a section of document with something else. Alternatively, '.surroundContents()' can allow you to do the same thing a lot more simply",
      "links": [
        [
          "Range Reference",
          "https://developer.mozilla.org/en-US/docs/Web/API/Range"
        ]
      ]
    },
    {
      "id": "3cbd",
      "category": "JavaScript",
      "topic": "objects",
      "title": "Objects using Class",
      "text": "If you use class to define objects, the object must include a constructor function with the syntax: 'constructor(parameters){code}' Private properties ('#propertyName') can only be accessed by that object and its method and have to be defined outside of the constructor (they can be given values in the constructor). Static methods ('static methodName') can't be accessed through instances, just through the class itself. You can also use Getter and Setter functions to return data as if it was a property. This can be used to only do complicated calculations if they are needed, or return data stored in a different property",
      "links": [
        [
          "Method Types",
          "https://learning.flatironschool.com/courses/7589/pages/method-types?module_item_id=670275"
        ],
        [
          "Classes Reference",
          "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"
        ]
      ]
    },
    {
      "id": "c427",
      "category": "JavaScript",
      "topic": "objects",
      "title": "Object Inheritance",
      "text": "To extend a class, use the syntax 'class c1 extends c0', where c0 is the original class and c1 is the one you are creating. This new class inherits the constructor by default, and inherits all methods of the parent class. You can then add more methods by just adding them to the new class, but adding to the constructor is more complicated. You have to define your own constructor in the new class, then use 'super(parentParameters)' to call the parent constructor. The parameters inside the parenthesis should be all that the parent constructor requires. Similarly, 'super.parentMethod()' can be used within methods in order to create a method that adds to the functionality of the parent one.",
      "links": [
        [
          "Extend",
          "https://learning.flatironschool.com/courses/7589/modules/items/670279"
        ],
        [
          "Super",
          "https://learning.flatironschool.com/courses/7589/pages/super?module_item_id=670281"
        ]
      ]
    },
    {
      "id": "4084",
      "category": "JavaScript",
      "topic": "objects",
      "title": "Objects using Functions",
      "text": "A constructor function is just a function that returns an object based on the parameters you give it, then paired with the 'new' keyword to connect the objects created with them. By convention, constructor functions start with a capital letter. To define an object from a constructor function, use this syntax: 'const obj = Constructor(parameters)'. Prototypes allow different functions to share the same exact method instead of each getting a copy. the syntax is: 'Constructor.prototype.functionName = function(parameters){}'",
      "links": [
        [
          "Constructor Functions",
          "https://learning.flatironschool.com/courses/7589/pages/constructor-functions?module_item_id=670286"
        ],
        [
          "Using Prototypes",
          "https://learning.flatironschool.com/courses/7589/pages/using-prototypes?module_item_id=670288"
        ]
      ]
    },
    {
      "id": "d457",
      "category": "CSS",
      "topic": "forms",
      "title": "Basic Formatting Select",
      "text": "Select dropdowns are hard to change, as the formatting of form elements is mostly done by the browsers, and because they one of the most complicated form elements. The menu they pull up when clicked on cannot be styled without JavaScript. The most generally applicable command is 'appearance: none', which clears some of the default formatting. To create a custom arrow on the select, you first need to put the select in a div, as the '::after' pseudo-element cannot be used on form elements. This pseudo-element is then set to have content \"\\25BC\" which is the CSS code for the arrow seen and positioned on the selector. The only other things done on this page were some padding to make the text feel less cramped and margins to visually separate it from unrelated elements.",
      "links": [
        [
          "W3 Create Custom Select",
          "https://www.w3schools.com/howto/howto_custom_select.asp"
        ],
        [
          "mdn Advanced Form Styling",
          "https://developer.mozilla.org/en-US/docs/Learn/Forms/Advanced_form_styling#appearance_controlling_os-level_styling"
        ],
        [
          "mdn ::after",
          "https://developer.mozilla.org/en-US/docs/Web/CSS/::after"
        ]
      ]
    },
    {
      "id": "bce4",
      "category": "React",
      "topic": "structure",
      "title": "The DOM as a Tree",
      "text": "Throughout React, elements are usually always structured in a tree, with the parent element passing down props to the child components, and the child components returning information when functions are passed to them. You have to pass up and down the tree, you can't pass from a component to its sibling",
      "links": []
    }
  ],
  "Favorites": [
    {
      "id": "b529",
      "category": "JavaScript",
      "topic": "mouse"
    },
    {
      "id": "607a",
      "category": "React",
      "topic": "structure"
    }
  ]
}